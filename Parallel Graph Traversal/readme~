Manil Bastola
Assignment 10
CPS 275

Files Included(6):

average.cc
dijkstras.cc
printqueue.cc
Makefile
readme
HomeworkCoverSheet.pdf

This project constists of 3 programs.One can compile all of them at once by using 
>>make all
command. However, individual programs can be worked out as follows,

1) average.cc
  
This program fills an array with random numbers and compares the execution time of finding the average of those numbers serially and in parallel. It calls in sub funtion getSum that takes an array with two low and high indices as well as number of threads to spawn as parameter.

To Compile

>>make average

To Run

>>./average <numNumbers> <numThreads>


2) dijkstras.cc

This program finds the shortest path from a source vertex to all other vertices in a weighted graph using an adjacency matrix. It call three helper funtions namely Initialize, getMinVertex and updateDistances

To Compile

>>make dijkstras

To Run

>>./dijkstras <numNumbers> <numThreads>

3) printqueue.cc

The function we were provided with (printqueue.cc) has to  implement a simple simulation of a print queue. However it fails to work properly for more than 2 consumers and even for less than 2 the jobs accumulate over time. I have fixed parts of the function takeJobs to make it work properly.

----------------------------------------------------------------------------

PART 3----ANALYSIS of PARALLEL DIJKSTRAS-----

The runtime for serial dijkstras alforithm for the Adjacency matrix is O(V^2).
In parallel, assuming we already have the adjMatrix, the Initialize function has complexity of Theta(logV). This is because of the recursive nature of the problem.The function has recurrece relationship of
 T(V) = 2T(V/2)+Theta(1) 
This is the Work caused by span of the two recursive steps of T(V/2) each.	
as the base case is just assignments with 3*O(1). The division of start and end to get midway and similarly halfnumThread are O(1). Now since we divide the list by half each time we recurse, two recursive steps have say T(V/2) whose compexity is unknown for now. Thus, the overall complexity is as above.
Using the Masters Theorem, this falls under case II where k = 0 and c=0 giving us the compleity of Theta(logV).

Similarly, the complexity of getMin can be analysed. Everything is similar except the base case. Here the recurrence relation holds
T(n) = 2T(V/2)+Theta(1) is the work caused by span of the two recursive steps of T(V/2) each. Giving O(logV)

The complexity of update is similar to that of Initialize & getMin as the base case is just Theta(1). Then the complexity is Theta(logV).

Now with p processors we have total time of 3*Theta[V/p + log(p)]
In Serial p = 1, giving us Theta(V).

Now the outside loop runs V times nomatter what. Thus for ideal p= infintiy, 
we have Theta(VlogV), for p processors Theta(V^2/p + log(p))=Theta(V^2/p) and for serial, Theta(V^2) respectively.

For sparse graph I believe the overheads of adj list is lesser than that of parallel adj martix as adj list can be efficiently made to run under O(e*logV) where V-1< e <V^2 without the recursive overheads of parallel ad matrix.Also speedups are less liekly to be seen for less number of vertices ie to say in this case I only saw 2x speedup for 10000 while 1.5x for 5000 and 0.8 for 1000 vertices which means parallel processing is great as long as numVertices are reasonable and we have to make sure that one do not blow up memory too because of huge vertices numbers that go 2^V recursions.
But for a dense matrix, list implementation breaks down to O(V^2*logV) with additional overheads of maintaining binary heaps and thus parallel adj matrix implemetaion wins in this case.  
It is less forward to parallelize AdjList implemetation becuase of the getMin method is based on maintianing min priority queue. It is difficult to parallelly update the min value ie decrease priority with parallel threads as concurrent percholate ups and heapifys are difficult to manage.

........................................................................

4) Here the main problem lies in checking whether the queue is empty or not as while may threads are working concurrently, they might just check the size while a parallelly another thread is popping the queue. This results ina race condition that the earlier thread which checked that size wasnt zero has now element in queue to pop. This results in crashing. Ive fixed it by locking the mutex object right before checking if its empty and if its empty unlock it and wait for a second for new job to arise. else if it is not empty, pop the queue and the unlock and do necessary printing (ie sleep for time joblength).


